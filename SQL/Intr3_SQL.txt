/ Funções de Agregação

    Max...
    A função max analisa um conjunto de valores e retorna o maior entre eles.

        SELECT MAX(preco_venda) FROM produtos;

        SELECT id_categoria, MAX(preco_venda) FROM produtos GROUP BY id_categoria;
        No exemplo acima estamos buscando o maior preço de venda em cada uma das categorias de
        produtos que temos. Ao final estamos agrupando pelo id da categoria.

        SELECT id_categoria, MAX(preco_venda) FROM produtos GROUP BY id_categoria
        HAVING MAX(preco_venda) > 10;
        No exemplo acima estamos buscando o maior preço de venda em cada uma das categorias de
        produtos que temos onde o preço de venda seja maior que 10. Ao final estamos agrupando
        pelo id da categoria.

    Min...
    A função min analisa um conjunto de valores e retorna o menor entre eles.

        SELECT MIN(preco_venda) FROM produtos;

    Sum...
    A função sum() realiza a soma dos valores em uma única coluna e retorna esse resultado.
       
        SELECT SUM(preco_venda) FROM produtos WHERE id_categoria = 1;
        No exemplo acima somamos todos os preços de venda dos produtos onde a categoria seja
        igual a 1.

    AVG...
    Com a função avg() podemos calcular a média aritmética dos valores em uma única coluna.

        SELECT AVG(preco_venda) FROM produtos;

    ROUND...
    Utilizamos a função round() para arredondar valores e desta forma especificar quantas casas
    decimais queremos apresentar o valor.

    SELECT ROUND(AVG(preco_venda), 2) FROM produtos;

    COUNT...
    A função count() retorna o total de linhas selecionadas.
    Por padrão, quando informado o nome de uma coluna, valores do tipo NULL são ignorados,
    mas quando informado um asterisco (*) todas as linhas serão contabilizadas.

    SELECT COUNT(preco_venda) AS Quantidade FROM produtos WHERE id_categoria = 1;
    No exemplo acima estamos contando quantos produtos da categoria 1 temos cadastrados.

/ Funções de Agrupamento e Ordenação

    GROUP BY 

        SELECT t.nome AS Tipo, SUM(p.quantidade) AS 'Quantidade em Estoque' FROM tipos AS t, produtos AS p
        WHERE t.id = p.id_tipo GROUP BY t.nome;
        No exemplo acima estamos solicitando a quantidade de produtos em estoque, agrupados pelo tipo. Utilizamos a
        função de agregação SUM() para efetuar a soma de cada tipo de produto.

        SELECT f.nome AS Fabricante, SUM(p.quantidade) AS 'Quantidade em Estoque' FROM fabricantes AS f,
        produtos AS p WHERE f.id = p.id_fabricante GROUP BY f.nome;
        No exemplo acima estamos solicitando a quantidade de produtos em estoque, agrupados pelo fabricante.
        Utilizamos a função de agregação SUM() para efetuar a soma de cada produto por fabricante.

        SELECT t.nome AS Tipo, f.nome AS Fabricante, SUM(p.quantidade) AS 'Quantidade em Estoque'
        FROM tipos AS t, fabricantes AS f, produtos AS p
        WHERE t.id = p.id_tipo AND f.id = p.id_fabricante
        GROUP BY t.nome, f.nome;
        No exemplo acima estamos solicitando a quantidade de produtos em estoque de acordo com os tipos e
        fabricantes.

        SELECT t.nome AS Tipo, f.nome AS Fabricante, SUM(p.quantidade) AS 'Quantidade em Estoque'
        FROM tipos AS t, fabricantes AS f, produtos AS p
        WHERE t.id = p.id_tipo AND f.id = p.id_fabricante
        GROUP BY t.nome, f.nome
        HAVING SUM(p.quantidade) > 200;
        No exemplo acima estamos solicitando a quantidade de produtos em estoque de acordo com os tipos e
        fabricantes onde a quantidade seja maior que 200 itens em estoque.


    ORDER BY
    A cláusula ORDER BY organiza os dados em ordem alfabética ou numérica.
    A ordenação pode ser ASC (Ascendente) ou DESC (Descendente)
    Por padrão, a ordenação é ascendente, ou seja, do menor para o maior.

        SELECT id, nome, id_tipo, id_fabricante, quantidade FROM produtos ORDER BY id ASC;

        SELECT id, nome, id_tipo, id_fabricante, quantidade FROM produtos ORDER BY id DESC;

        SELECT id, nome, id_tipo, id_fabricante, quantidade FROM produtos ORDER BY quantidade DESC;